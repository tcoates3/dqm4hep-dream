/// \file DriftChamberFileReader.cc
/*
 *
 * DriftChamberFileReader.cc source template automatically generated by a class generator
 * Creation date : lun. mars 7 2016
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Tom Coates
 * @copyright CNRS , IPNL
 */


// -- std headers 
#include <sstream>

// -- dqm4hep headers
#include <dqm4hep/Event.h>
#include <dqm4hep/EventReader.h>
#include <dqm4hep/StatusCodes.h>
#include <dqm4hep/GenericEvent.h>
#include <dqm4hep/PluginManager.h>
#include <dqm4hep/XmlHelper.h>

// -- root headers
#include "TFile.h"
#include "TTree.h"
#include "TBranch.h"
#include "TLeaf.h"

namespace dqm4hep {

  namespace core {

    /**
     *  @brief  DriftChamberFileReader class
     *          An example plugin for creating file readers
     */
    class DriftChamberFileReader : public EventReader {
    public:
      DriftChamberFileReader() = default;
      ~DriftChamberFileReader() override;
      DriftChamberFileReader(const DriftChamberFileReader&) = delete;
      DriftChamberFileReader& operator=(const DriftChamberFileReader&) = delete;

      core::StatusCode open(const std::string &fname) override;
      core::StatusCode skipNEvents(int nEvents) override;
      core::StatusCode runInfo(core::Run &run) override;
      core::StatusCode readNextEvent() override;
      core::StatusCode close() override;
      
      int nEntries = -1;
      int currentEventNum = -1;
      TFile *rootFile = new TFile;
      TTree *mainTree = new TTree;

    };
    
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    DriftChamberFileReader::~DriftChamberFileReader() {

    }

    //-------------------------------------------------------------------------------------------------

    StatusCode DriftChamberFileReader::open(const std::string &fname) {
      dqm_debug("Inside open()");
      
      rootFile = new TFile(fname.c_str());
      mainTree = (TTree*)rootFile->Get("DataTree");

      nEntries = mainTree->GetEntries();
      if (nEntries == -1) {
	dqm_error("Could not determine the number of events in file {0}", fname);
	return STATUS_CODE_FAILURE;
      }
      currentEventNum = 0;
      mainTree->GetEvent(0);

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode DriftChamberFileReader::skipNEvents(int nEvents) {

      currentEventNum += nEvents;

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode DriftChamberFileReader::runInfo(core::Run &run) {

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode DriftChamberFileReader::readNextEvent() {
      dqm_debug("Inside readNextEvent()");

      if (currentEventNum == nEntries) {
	dqm_info("Reached end of file");
	return STATUS_CODE_OUT_OF_RANGE;
      }

      EventPtr pEvent = GenericEvent::make_shared();
      GenericEvent *pGenericEvent = pEvent->getEvent<GenericEvent>();

      // Seeking to the correct event
      mainTree->GetEvent(currentEventNum);

      if ( (mainTree->GetBranch("event")->FindLeaf("event")->GetValue()-1) != currentEventNum) {
	dqm_error("Event number mismatch");
	return STATUS_CODE_FAILURE;
      }
      
      dqm_debug("File reader event number: {0}", currentEventNum);
      dqm_debug("ROOT file event number:   {0}", mainTree->GetBranch("event")->FindLeaf("event")->GetValue());

      //
      // ...
      // ... Extracting information goes here
      // ...
      //

      onEventRead().emit(pEvent);
      currentEventNum++;

      return STATUS_CODE_SUCCESS;
    }

    StatusCode DriftChamberFileReader::close() {
      
      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------
    
    DQM_PLUGIN_DECL(DriftChamberFileReader, "DriftChamberFileReader");
  }
}
