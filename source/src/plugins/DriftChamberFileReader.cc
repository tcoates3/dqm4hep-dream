/// \file DriftChamberFileReader.cc
/*
 *
 * DriftChamberFileReader.cc source template automatically generated by a class generator
 * Creation date : lun. mars 7 2016
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Tom Coates
 * @copyright CNRS , IPNL
 */


// -- std headers 
#include <sstream>

// -- dqm4hep headers
#include <dqm4hep/Event.h>
#include <dqm4hep/EventReader.h>
#include <dqm4hep/StatusCodes.h>
#include <dqm4hep/GenericEvent.h>
#include <dqm4hep/PluginManager.h>
#include <dqm4hep/XmlHelper.h>

#include <stdio.h>

namespace dqm4hep {

  namespace core {

    /**
     *  @brief  DriftChamberFileReader class
     *          An example plugin for creating file readers
     */
    class DriftChamberFileReader : public EventReader {
    public:
      DriftChamberFileReader() = default;
      ~DriftChamberFileReader() override;
      DriftChamberFileReader(const DriftChamberFileReader&) = delete;
      DriftChamberFileReader& operator=(const DriftChamberFileReader&) = delete;

      core::StatusCode open(const std::string &fname) override;
      core::StatusCode skipNEvents(int nEvents) override;
      core::StatusCode runInfo(core::Run &run) override;
      core::StatusCode readNextEvent() override;
      core::StatusCode close() override;
      
      FILE* inputFile  = 0;
      uint8_t numberOfDevices;
      int channelPDevice[10];

    };
    
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    DriftChamberFileReader::~DriftChamberFileReader() {

    }

    //-------------------------------------------------------------------------------------------------

    StatusCode DriftChamberFileReader::open(const std::string &fname) {
      
      inputFile = fopen(fname.c_str(), "r");

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode DriftChamberFileReader::skipNEvents(int nEvents) {

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode DriftChamberFileReader::runInfo(core::Run &run) {

      uint32_t runNumber;
      fread(&runNumber, sizeof(uint32_t), 1, inputFile);
      run.setRunNumber(runNumber);

      uint64_t startTime;
      fread(&startTime, sizeof(uint64_t), 1, inputFile);
      //run.setStartTime(core::time::asPoint(startTime));

      fread(&numberOfDevices, sizeof(uint8_t), 1, inputFile);

      run.setDetectorName("DREAM drift chamber");

      fread(channelPDevice, sizeof(uint8_t), numberOfDevices, inputFile);

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode DriftChamberFileReader::readNextEvent() {
      dqm_debug("Inside readNextEvent()");

      if (feof(inputFile)) {
        dqm_warning("Reached end of file");
        return STATUS_CODE_OUT_OF_RANGE;
      }

      EventPtr pEvent = GenericEvent::make_shared();
      GenericEvent *pGenericEvent = pEvent->getEvent<GenericEvent>();

      uint32_t eventNumber;
      bool validEvent = fread(&eventNumber, sizeof(uint32_t), 1, inputFile);
      if (!validEvent) {
	dqm_warning("Event did not have a valid event number, skipping...");
	return STATUS_CODE_NOT_FOUND;
      }
      pEvent->setEventNumber(eventNumber);
      //dqm_debug("Event number: {0}", eventNumber);

      uint8_t *deviceIDs = new uint8_t[numberOfDevices];
      fread(&deviceIDs, sizeof(uint8_t), numberOfDevices, inputFile);

      uint8_t *deviceTypes = new uint8_t[numberOfDevices];
      fread(&deviceTypes, sizeof(uint8_t), numberOfDevices, inputFile);

      //dqm_debug("First device ID and type: {0} {1}", deviceIDs[0], deviceTypes[0]);

      int channelNumber[34];
      int channelData[34][1024];

      for (int i = 0; i < numberOfDevices; i++) {
	for (int k = 0; k < channelPDevice[i]; k++) {
	  fread(&channelNumber[k], sizeof(uint16_t), 1, inputFile);
	  
	  fread(&channelData[k], sizeof(uint16_t), 1, inputFile);
	}
      }
      
      //pGenericEvent->setValues();

      onEventRead().emit(pEvent);
      /*
      delete[] deviceIDs;
      delete[] deviceTypes;
      */
      return STATUS_CODE_SUCCESS;
    }

    StatusCode DriftChamberFileReader::close() {

      fclose(inputFile);
      
      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------
    
    DQM_PLUGIN_DECL(DriftChamberFileReader, "DriftChamberFileReader");
  }
}
