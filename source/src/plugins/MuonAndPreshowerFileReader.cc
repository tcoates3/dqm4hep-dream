/// \file MuonAndPreshowerFileReader.cc
/*
 *
 * MuonAndPreshowerFileReader.cc source template automatically generated by a class generator
 * Creation date : lun. mars 7 2016
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Tom Coates
 * @copyright CNRS , IPNL
 */


// -- std headers 
#include <sstream>

// -- dqm4hep headers
#include <dqm4hep/Event.h>
#include <dqm4hep/EventReader.h>
#include <dqm4hep/StatusCodes.h>
#include <dqm4hep/GenericEvent.h>
#include <dqm4hep/PluginManager.h>
#include <dqm4hep/XmlHelper.h>

namespace dqm4hep {

  namespace core {

    /**
     *  @brief  MuonAndPreshowerFileReader class
     *          An example plugin for creating file readers
     */
    class MuonAndPreshowerFileReader : public EventReader {
    public:
      MuonAndPreshowerFileReader() = default;
      ~MuonAndPreshowerFileReader() override;
      MuonAndPreshowerFileReader(const MuonAndPreshowerFileReader&) = delete;
      MuonAndPreshowerFileReader& operator=(const MuonAndPreshowerFileReader&) = delete;

      core::StatusCode open(const std::string &fname) override;
      core::StatusCode skipNEvents(int nEvents) override;
      core::StatusCode runInfo(core::Run &run) override;
      core::StatusCode readNextEvent() override;
      core::StatusCode close() override;
      
    };
    
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    MuonAndPreshowerFileReader::~MuonAndPreshowerFileReader() {

    }

    //-------------------------------------------------------------------------------------------------

    StatusCode MuonAndPreshowerFileReader::open(const std::string &fname) {
      
      // rootFile is assumed to be the handle for the rootfile itself
      // nEntries has to be declared in the header, since it's used outside of this function
      nEntries = rootFile->t1->GetEntries();

      auto hits = rootFile->t1->GetBranch("nGemHit");

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode MuonAndPreshowerFileReader::skipNEvents(int nEvents) {

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode MuonAndPreshowerFileReader::runInfo(core::Run &run) {

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode MuonAndPreshowerFileReader::readNextEvent() {

      for (int i=0; i < nEntries; i++) {
	thisDataPoint = myTree->(i);
	thisDataPoint = myTree->GetEvent(i);
	// Do something with this?
      }


      //Getting somewhere with doing t1->GetListOfLeaves(), which returns a TObjArray.
      //With the TObjArray we can nominate first and last objects and access their information via Dump().
      // The important information from Dump() is fName/fTitle and ...?

      return STATUS_CODE_SUCCESS;
    }

    StatusCode MuonAndPreshowerFileReader::close() {
      
      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------
    
    DQM_PLUGIN_DECL(MuonAndPreshowerFileReader, "MuonAndPreshowerFileReader");
  }
}
