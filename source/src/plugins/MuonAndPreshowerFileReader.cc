/// \file MuonAndPreshowerFileReader.cc
/*
 ***
 *
 * MuonAndPreshowerFileReader.cc source template automatically generated by a class generator
 * Creation date : lun. mars 7 2016
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Tom Coates
 * @copyright CNRS , IPNL
 */


// -- std headers 
#include <sstream>

// -- dqm4hep headers
#include <dqm4hep/Event.h>
#include <dqm4hep/EventReader.h>
#include <dqm4hep/StatusCodes.h>
#include <dqm4hep/GenericEvent.h>
#include <dqm4hep/PluginManager.h>
#include <dqm4hep/XmlHelper.h>

// -- root headers
#include "TFile.h"
#include "TTree.h"
#include "TBranch.h"
#include "TLeaf.h"

namespace dqm4hep {

  namespace core {

    /**
     *  @brief  MuonAndPreshowerFileReader class
     *          An example plugin for creating file readers
     */
    class MuonAndPreshowerFileReader : public EventReader {
    public:
      MuonAndPreshowerFileReader() = default;
      ~MuonAndPreshowerFileReader() override;
      MuonAndPreshowerFileReader(const MuonAndPreshowerFileReader&) = delete;
      MuonAndPreshowerFileReader& operator=(const MuonAndPreshowerFileReader&) = delete;

      core::StatusCode open(const std::string &fname) override;
      core::StatusCode skipNEvents(int nEvents) override;
      core::StatusCode runInfo(core::Run &run) override;
      core::StatusCode readNextEvent() override;
      core::StatusCode close() override;

      int nEntries = -1;
      int currentEventNum = -1;
      TFile *rootFile = new TFile;
      TTree *mainTree = new TTree;
      
    };
    
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    MuonAndPreshowerFileReader::~MuonAndPreshowerFileReader() {
      dqm_debug("Inside destructor");

    }

    //-------------------------------------------------------------------------------------------------

    StatusCode MuonAndPreshowerFileReader::open(const std::string &fname) {
      dqm_debug("Inside open()");
      
      rootFile = new TFile(fname.c_str());
      mainTree = (TTree*)rootFile->Get("t1");

      nEntries = mainTree->GetEntries();
      if (nEntries == -1) {
	dqm_error("Could not determine the number of events in file {0}", fname);
	return STATUS_CODE_FAILURE;
      }
      currentEventNum = 0;
      mainTree->GetEvent(0);

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode MuonAndPreshowerFileReader::skipNEvents(int nEvents) {
      dqm_debug("Inside skipNEvents()");

      currentEventNum += nEvents;

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode MuonAndPreshowerFileReader::runInfo(core::Run &run) {
      dqm_debug("Inside runInfo()");

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode MuonAndPreshowerFileReader::readNextEvent() {
      dqm_debug("Inside readNextEvent()");

      if (currentEventNum == nEntries-1) {
	dqm_info("Reached end of file");
	return STATUS_CODE_OUT_OF_RANGE;
      }

      EventPtr pEvent = GenericEvent::make_shared();
      GenericEvent *pGenericEvent = pEvent->getEvent<GenericEvent>();

      // Seeking to the correct event
      mainTree->GetEvent(currentEventNum);
      if (mainTree->GetBranch("Event")->GetLeaf("Event")->GetValue() != currentEventNum) {
	dqm_error("Event number mismatch");
	return STATUS_CODE_FAILURE;
      }

      int i_eventNum = mainTree->GetBranch("Event")->GetLeaf("Event")->GetValue();
      pEvent->setEventNumber(i_eventNum);

      int i_triggerTime = mainTree->GetBranch("trigger_time")->GetLeaf("trigger_time")->GetValue();
      pEvent->setTimeStamp(core::time::asPoint(i_triggerTime));

      
      std::vector<int> i_triggerOn;
      i_triggerOn.push_back(mainTree->GetBranch("trigger_is_on")->GetLeaf("trigger_is_on")->GetValue());
      pGenericEvent->setValues("triggerOn", i_triggerOn);
      std::vector<int> i_triggerEvent;
      i_triggerEvent.push_back(mainTree->GetBranch("trigger_event")->GetLeaf("trigger_event")->GetValue());
      pGenericEvent->setValues("triggerEvent", i_triggerEvent);
      

      std::vector<int> i_nGemHitValue;
      i_nGemHitValue.push_back(mainTree->GetBranch("nGemHit")->GetLeaf("nGemHit")->GetValue());
      pGenericEvent->setValues("nGemHit", i_nGemHitValue);
      
      std::vector<int> i_GemHit_nHit;
      i_GemHit_nHit.push_back(mainTree->GetBranch("GemHit_nHit")->GetLeaf("GemHit_nHit")->GetValue());
      pGenericEvent->setValues("GemHit_nHit", i_GemHit_nHit);

      std::vector<int> i_nGemCluster;
      i_nGemCluster.push_back(mainTree->GetBranch("nGemCluster")->GetLeaf("nGemCluster")->GetValue());
      pGenericEvent->setValues("nGemCluster", i_nGemCluster);
      
      /*
      std::vector<int> i_var;
      i_var = mainTree->GetBranch("var")->GetLeaf("var")->GetValue();
      pGenericEvent->setValues("var", i_var);
      */

      onEventRead().emit(pEvent);
      currentEventNum++;

      return STATUS_CODE_SUCCESS;
    }
  

    StatusCode MuonAndPreshowerFileReader::close() {
      dqm_debug("Inside close()");
     
      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------
    
    DQM_PLUGIN_DECL(MuonAndPreshowerFileReader, "MuonAndPreshowerFileReader");
  }
}
