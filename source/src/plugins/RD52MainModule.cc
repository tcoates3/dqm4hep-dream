/// \file RD52MainModule.cc
/*
 *
 * RD52MainModule.cc source template automatically generated by a class generator
 * Creation date : 13 june 2018
 *
 * This file is part of dqm4hep-dream libraries.
 *
 * dqm4hep-dream is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with dqm4hep-dream.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @author Tom Coates
 * @copyright 2018
 */

// -- dqm4hep headers
#include <dqm4hep/Internal.h>
#include <dqm4hep/StatusCodes.h>
#include <dqm4hep/GenericEvent.h>
#include <dqm4hep/RootHeaders.h>
#include <dqm4hep/Module.h>
#include "dqm4hep/PluginManager.h"
#include "dqm4hep/OnlineElement.h"
#include "dqm4hep/ModuleApi.h"

namespace dqm4hep {

  namespace dream {
    
    class RD52MainModule : public dqm4hep::online::AnalysisModule {
    public:
      RD52MainModule() = default;
      RD52MainModule(const RD52MainModule&) = delete;
      RD52MainModule& operator=(const RD52MainModule&) = delete;
      
    private:
      void readSettings(const core::TiXmlHandle &handle) override;
      void initModule() override;
      void startOfRun(core::Run &run) override;
      void startOfCycle() override;
      void endOfCycle(const online::EOCCondition &condition) override;
      void endOfRun(const core::Run &run) override;
      void endModule() override;
      void process(core::EventPtr event) override;
      
    private:
      std::vector<online::OnlineElementPtr> m_pChannelSpectra;
      std::vector<online::OnlineElementPtr> m_pLeakage;

      online::OnlineElementPtr m_pDWC1Left;
      online::OnlineElementPtr m_pDWC1Right;
      online::OnlineElementPtr m_pDWC1Up;
      online::OnlineElementPtr m_pDWC1Down;
      online::OnlineElementPtr m_pDWC2Left;
      online::OnlineElementPtr m_pDWC2Right;
      online::OnlineElementPtr m_pDWC2Up;
      online::OnlineElementPtr m_pDWC2Down;

      online::OnlineElementPtr m_pDWCMap;

      online::OnlineElementPtr m_pIT;
      online::OnlineElementPtr m_pT3PSD;
      online::OnlineElementPtr m_pTC;
      online::OnlineElementPtr m_pMu;

      online::OnlineElementPtr m_pR;
      online::OnlineElementPtr m_pE;
      online::OnlineElementPtr m_pEvR;

      online::OnlineElementPtr m_pHitmapScintillator;
      online::OnlineElementPtr m_pHitmapCherenkov;

    };
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52MainModule::readSettings(const core::TiXmlHandle &xmlHandle) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52MainModule::initModule() {
      
      for (int i=0; i<72; i++) {
        std::string meName = "SpectrumCh" + std::to_string(i);
        m_pChannelSpectra.push_back(online::ModuleApi::getMonitorElement(this, "/Spectra", meName));
      }

      for (int i=0; i<21; i++) {
        std::string meName = "Leakage" + std::to_string(i);
        m_pLeakage.push_back(online::ModuleApi::getMonitorElement(this, "/Leakage", meName));
      }

      m_pDWC1Left  = online::ModuleApi::getMonitorElement(this, "/DWC", "DWC1Left");
      m_pDWC1Right = online::ModuleApi::getMonitorElement(this, "/DWC", "DWC1Right");
      m_pDWC1Up    = online::ModuleApi::getMonitorElement(this, "/DWC", "DWC1Up");
      m_pDWC1Down  = online::ModuleApi::getMonitorElement(this, "/DWC", "DWC1Down");
      m_pDWC2Left  = online::ModuleApi::getMonitorElement(this, "/DWC", "DWC2Left");
      m_pDWC2Right = online::ModuleApi::getMonitorElement(this, "/DWC", "DWC2Right");
      m_pDWC2Up    = online::ModuleApi::getMonitorElement(this, "/DWC", "DWC2Up");
      m_pDWC2Down  = online::ModuleApi::getMonitorElement(this, "/DWC", "DWC2Down");

      m_pDWCMap    = online::ModuleApi::getMonitorElement(this, "/DWC", "DWCMap");

      m_pIT     = online::ModuleApi::getMonitorElement(this, "/Ancillary", "IT");
      m_pT3PSD  = online::ModuleApi::getMonitorElement(this, "/Ancillary", "T3PSD");
      m_pTC     = online::ModuleApi::getMonitorElement(this, "/Ancillary", "TC");
      m_pMu     = online::ModuleApi::getMonitorElement(this, "/Ancillary", "mu");

      m_pR      = online::ModuleApi::getMonitorElement(this, "/", "R");
      m_pE      = online::ModuleApi::getMonitorElement(this, "/", "E");
      m_pEvR    = online::ModuleApi::getMonitorElement(this, "/", "EvR");

      m_pHitmapScintillator  = online::ModuleApi::getMonitorElement(this, "/Hitmaps", "ScintillatorLayer");
      m_pHitmapCherenkov     = online::ModuleApi::getMonitorElement(this, "/Hitmaps", "CherenkovLayer");

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52MainModule::startOfRun(core::Run &/*run*/) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52MainModule::startOfCycle() {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52MainModule::endOfCycle(const online::EOCCondition &/*condition*/) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52MainModule::endOfRun(const core::Run &/*run*/) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52MainModule::endModule() {

    }
    
    //-------------------------------------------------------------------------------------------------

    void RD52MainModule::process(core::EventPtr pEvent) {

      if (nullptr == pEvent) {
	dqm_warning("Event pointer is invalid - skipping this event");
	return;
      }

      std::vector<double> eventADC0;
      std::vector<double> eventADC1;
      std::vector<double> eventADC2;
      std::vector<double> eventADC3;
      std::vector<double> eventADC4;
      std::vector<double> eventTDC;
      std::vector<double> eventPedestalADC0;
      std::vector<double> eventPedestalADC1;
      std::vector<double> eventPedestalADC2;
      std::vector<double> eventPedestalADC3;
      std::vector<double> eventPedestalADC4;
      std::vector<double> eventPedestalRMSADC0;
      std::vector<double> eventPedestalRMSADC1;
      std::vector<double> eventPedestalRMSADC2;
      std::vector<double> eventPedestalRMSADC3;
      std::vector<double> eventPedestalRMSADC4;
       
      core::GenericEvent *pGenericEvent = pEvent->getEvent<core::GenericEvent>();
      
      pGenericEvent->getValues("ADC0", eventADC0);    
      pGenericEvent->getValues("ADC1", eventADC1);
      pGenericEvent->getValues("ADC2", eventADC2);
      pGenericEvent->getValues("ADC3", eventADC3);
      pGenericEvent->getValues("ADC4", eventADC4);
      pGenericEvent->getValues("TDC",  eventTDC);
      pGenericEvent->getValues("pedestalADC0", eventPedestalADC0);
      pGenericEvent->getValues("pedestalADC1", eventPedestalADC1);
      pGenericEvent->getValues("pedestalADC2", eventPedestalADC2);
      pGenericEvent->getValues("pedestalADC3", eventPedestalADC3);
      pGenericEvent->getValues("pedestalADC4", eventPedestalADC4);
      pGenericEvent->getValues("pedestalRMSADC0", eventPedestalRMSADC0);
      pGenericEvent->getValues("pedestalRMSADC1", eventPedestalRMSADC1);
      pGenericEvent->getValues("pedestalRMSADC2", eventPedestalRMSADC2);
      pGenericEvent->getValues("pedestalRMSADC3", eventPedestalRMSADC3);
      pGenericEvent->getValues("pedestalRMSADC4", eventPedestalRMSADC4);
      
      std::vector<double> eventAllADCs = eventADC0;
      eventAllADCs.insert(std::end(eventAllADCs), std::begin(eventADC1), std::end(eventADC1));
      eventAllADCs.insert(std::end(eventAllADCs), std::begin(eventADC2), std::begin(eventADC2) + 8);

      std::vector<double> eventAllLeakage;
      eventAllLeakage.insert(eventAllLeakage.begin(), eventADC3.begin()+16, eventADC3.end());
      eventAllLeakage.insert(eventAllLeakage.end(), eventADC4.begin(), eventADC4.begin()+4);

      std::vector<double> eventAllPedestalADCs = eventPedestalADC0;
      eventAllPedestalADCs.insert(std::end(eventAllPedestalADCs), std::begin(eventPedestalADC1), std::end(eventPedestalADC1));
      eventAllPedestalADCs.insert(std::end(eventAllPedestalADCs), std::begin(eventPedestalADC2), std::begin(eventPedestalADC2) + 8);

      std::vector<double> eventAllPedestalRMSADCs = eventPedestalRMSADC0;
      eventAllPedestalRMSADCs.insert(std::end(eventAllPedestalRMSADCs), std::begin(eventPedestalRMSADC1), std::end(eventPedestalRMSADC1));
      eventAllPedestalRMSADCs.insert(std::end(eventAllPedestalRMSADCs), std::begin(eventPedestalRMSADC2), std::begin(eventPedestalRMSADC2) + 8);
      
      for (int i = 0; i < 71; i++) {
	double thisChannelPedestal = eventAllPedestalADCs[i] + 1.5*eventAllPedestalRMSADCs[i];
	eventAllADCs[i] = eventAllADCs[i] - thisChannelPedestal;
      }

      for (int i = 0; i < 71; i++) {
	m_pChannelSpectra[i]->objectTo<TH1D>()->Fill(eventAllADCs[i]);
      }
      for (int i = 0; i < 21; i++) {
	m_pLeakage[i]->objectTo<TH1D>()->Fill(eventAllLeakage[i]);
      }

      //Ancillary and pedestals
      double preshower = eventADC4[9];
      double muonTrigger = eventADC4[11];
      double IT = eventADC4[8];
      double TC = eventADC4[10];
   
      double preshowerPedestalCut = eventPedestalADC4[9] + 1.5*eventPedestalRMSADC4[9];
      double muonPedestalCut = eventPedestalADC4[11] + 1.5*eventPedestalRMSADC4[11];
      double ITPedestalCut = eventPedestalADC4[8] + 1.5*eventPedestalRMSADC4[8];
      double TCPedestalCut = eventPedestalADC4[10] + 1.5*eventPedestalRMSADC4[10];

      // Booleans for the pedestals and cuts
      bool isPreshowerEvent = (preshower > preshowerPedestalCut);
      bool isMuonEvent = (muonTrigger > muonPedestalCut);

      //Actual histograms for ancillary
      m_pT3PSD->objectTo<TH1D>()->Fill(preshower);
      m_pMu->objectTo<TH1D>()->Fill(muonTrigger);
      m_pIT->objectTo<TH1D>()->Fill(IT);
      m_pTC->objectTo<TH1D>()->Fill(TC);

      m_pDWC1Left->objectTo<TH1D>()->Fill(eventTDC[0]);
      m_pDWC1Right->objectTo<TH1D>()->Fill(eventTDC[1]);
      m_pDWC1Up->objectTo<TH1D>()->Fill(eventTDC[2]);
      m_pDWC1Down->objectTo<TH1D>()->Fill(eventTDC[3]);
      m_pDWC2Left->objectTo<TH1D>()->Fill(eventTDC[4]);
      m_pDWC2Right->objectTo<TH1D>()->Fill(eventTDC[5]);
      m_pDWC2Up->objectTo<TH1D>()->Fill(eventTDC[6]);
      m_pDWC2Down->objectTo<TH1D>()->Fill(eventTDC[7]);

      //Trying to make the 2D map of the DWC
      m_pDWCMap->objectTo<TH2D>()->Fill(eventTDC[0], eventTDC[3]);

      //Creating hitmap -- using RO mappings from 2012 testbeam
      std::vector<double> channelADCsSc;
      std::vector<double> channelADCsCh;

      for (int i = 0; i < 71; i++) {
	if (i % 2) {
	  channelADCsCh.push_back(eventAllADCs[i] - eventAllPedestalADCs[i]);
	}
	else {
	  channelADCsSc.push_back(eventAllADCs[i] - eventAllPedestalADCs[i]);
	}
      }
      int channelNum = 0;
      for (int i = 0; i < 6; i++) {
	for (int j = 0; j < 6; j++) {
	  m_pHitmapScintillator->objectTo<TH2D>()->Fill(i, j, channelADCsSc[channelNum]);
	  channelNum++;
	}
      }
      channelNum = 0;
      for (int i = 0; i < 6; i++) {
	for (int j = 0; j < 6; j++) {
	  m_pHitmapCherenkov->objectTo<TH2D>()->Fill(i, j, channelADCsCh[channelNum]);
	  channelNum++;
	}
      }

      // Total energy in the event
      double totalADC = 0;
      for (int i = 0; i < 72; i++) {
	totalADC += eventAllADCs[i];
      }

      // Calculating R
      std::sort(eventAllADCs.begin(), eventAllADCs.end());
      std::reverse(eventAllADCs.begin(), eventAllADCs.end());
      double highestChannel = eventAllADCs[0];
      double tenHighestChannels = 0;
      for (int i = 0; i < 9; i++) {
	tenHighestChannels += eventAllADCs[i];
      }

      double energyRatio = highestChannel/tenHighestChannels;
      m_pE->objectTo<TH1D>()->Fill(totalADC);
      m_pR->objectTo<TH1D>()->Fill(energyRatio);
      /*if (isMuonEvent) {
	m_pEvR->objectTo<TH2D>()->Fill(totalADC, energyRatio);
	} */
      bool e_totCut = (totalADC < 260);
      bool rCut = (energyRatio > 0.62);
      if (e_totCut and rCut and !isMuonEvent) {
	m_pEvR->objectTo<TH2D>()->Fill(totalADC, energyRatio);
      }
      dqm_debug("Total ADC: {0} / Energy ratio: {1}", totalADC, energyRatio);
	
    }
    
    DQM_PLUGIN_DECL(RD52MainModule, "RD52MainModule");
    
  }
  
}
