// \file RD52MainModule.cc
/*
 *
 * RD52MainModule.cc source template automatically generated by a class generator
 * Creation date : 13 june 2018
 *
 * This file is part of dqm4hep-dream libraries.
 *
 * dqm4hep-dream is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with dqm4hep-dream.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @author Tom Coates
 * @copyright 2018
 */

// -- dqm4hep headers
#include <dqm4hep/Internal.h>
#include <dqm4hep/StatusCodes.h>
#include <dqm4hep/GenericEvent.h>
#include <dqm4hep/RootHeaders.h>
#include <dqm4hep/Module.h>
#include "dqm4hep/PluginManager.h"
#include "dqm4hep/OnlineElement.h"
#include "dqm4hep/ModuleApi.h"

#include <unordered_map>

namespace dqm4hep {

  namespace dream {
    
    class RD52MainModule : public dqm4hep::online::AnalysisModule {
    public:
      RD52MainModule() = default;
      RD52MainModule(const RD52MainModule&) = delete;
      RD52MainModule& operator=(const RD52MainModule&) = delete;
      
    private:
      void readSettings(const core::TiXmlHandle &handle) override;
      void initModule() override;
      void startOfRun(core::Run &run) override;
      void startOfCycle() override;
      void endOfCycle(const online::EOCCondition &condition) override;
      void endOfRun(const core::Run &run) override;
      void endModule() override;
      void process(core::EventPtr event) override;
      
    private:
      std::vector<online::OnlineElementPtr> m_pChannelSpectra;
      std::vector<online::OnlineElementPtr> m_pLeakage;

      online::OnlineElementPtr m_pDWC1Left;
      online::OnlineElementPtr m_pDWC1Right;
      online::OnlineElementPtr m_pDWC1Up;
      online::OnlineElementPtr m_pDWC1Down;
      online::OnlineElementPtr m_pDWC2Left;
      online::OnlineElementPtr m_pDWC2Right;
      online::OnlineElementPtr m_pDWC2Up;
      online::OnlineElementPtr m_pDWC2Down;

      online::OnlineElementPtr m_pDWCMap1;
      online::OnlineElementPtr m_pDWCMap2;

      online::OnlineElementPtr m_pIT;
      online::OnlineElementPtr m_pT3PSD;
      online::OnlineElementPtr m_pTC;
      online::OnlineElementPtr m_pMu;

      online::OnlineElementPtr m_pR;
      online::OnlineElementPtr m_pE;
      online::OnlineElementPtr m_pEvR;

      online::OnlineElementPtr m_pHitmapScintillator;
      online::OnlineElementPtr m_pHitmapCherenkov;

      online::OnlineElementPtr m_pTowerPlotSc;
      online::OnlineElementPtr m_pTowerPlotCh;

    };
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52MainModule::readSettings(const core::TiXmlHandle &xmlHandle) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52MainModule::initModule() {
      
      for (int i=0; i<72; i++) {
        std::string meName = "SpectrumCh" + std::to_string(i);
        m_pChannelSpectra.push_back(online::ModuleApi::getMonitorElement(this, "/Spectra", meName));
      }

      for (int i=0; i<21; i++) {
        std::string meName = "Leakage" + std::to_string(i);
        m_pLeakage.push_back(online::ModuleApi::getMonitorElement(this, "/Leakage", meName));
      }

      m_pDWC1Left  = online::ModuleApi::getMonitorElement(this, "/DWC", "DWC1Left");
      m_pDWC1Right = online::ModuleApi::getMonitorElement(this, "/DWC", "DWC1Right");
      m_pDWC1Up    = online::ModuleApi::getMonitorElement(this, "/DWC", "DWC1Up");
      m_pDWC1Down  = online::ModuleApi::getMonitorElement(this, "/DWC", "DWC1Down");
      m_pDWC2Left  = online::ModuleApi::getMonitorElement(this, "/DWC", "DWC2Left");
      m_pDWC2Right = online::ModuleApi::getMonitorElement(this, "/DWC", "DWC2Right");
      m_pDWC2Up    = online::ModuleApi::getMonitorElement(this, "/DWC", "DWC2Up");
      m_pDWC2Down  = online::ModuleApi::getMonitorElement(this, "/DWC", "DWC2Down");

      m_pDWCMap1   = online::ModuleApi::getMonitorElement(this, "/DWC", "DWCMap1");
      m_pDWCMap2   = online::ModuleApi::getMonitorElement(this, "/DWC", "DWCMap2");

      m_pIT     = online::ModuleApi::getMonitorElement(this, "/Ancillary", "IT");
      m_pT3PSD  = online::ModuleApi::getMonitorElement(this, "/Ancillary", "T3PSD");
      m_pTC     = online::ModuleApi::getMonitorElement(this, "/Ancillary", "TC");
      m_pMu     = online::ModuleApi::getMonitorElement(this, "/Ancillary", "mu");

      m_pR      = online::ModuleApi::getMonitorElement(this, "/", "R");
      m_pE      = online::ModuleApi::getMonitorElement(this, "/", "E");
      m_pEvR    = online::ModuleApi::getMonitorElement(this, "/", "EvR");

      m_pHitmapScintillator  = online::ModuleApi::getMonitorElement(this, "/Hitmaps", "ScintillatorLayer");
      m_pHitmapCherenkov     = online::ModuleApi::getMonitorElement(this, "/Hitmaps", "CherenkovLayer");

      m_pTowerPlotSc = online::ModuleApi::getMonitorElement(this, "/", "TowerPlotSc");
      m_pTowerPlotCh = online::ModuleApi::getMonitorElement(this, "/", "TowerPlotCh");

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52MainModule::startOfRun(core::Run &/*run*/) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52MainModule::startOfCycle() {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52MainModule::endOfCycle(const online::EOCCondition &/*condition*/) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52MainModule::endOfRun(const core::Run &/*run*/) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52MainModule::endModule() {

    }
    
    //-------------------------------------------------------------------------------------------------

    void RD52MainModule::process(core::EventPtr pEvent) {

      if (nullptr == pEvent) {
	dqm_warning("Event pointer is invalid - skipping this event");
	return;
      }

      std::vector<double> eventADC0;
      std::vector<double> eventADC1;
      std::vector<double> eventADC2;
      std::vector<double> eventADC3;
      std::vector<double> eventADC4;
      std::vector<double> eventTDC;
      std::vector<double> eventPedestalADC0;
      std::vector<double> eventPedestalADC1;
      std::vector<double> eventPedestalADC2;
      std::vector<double> eventPedestalADC3;
      std::vector<double> eventPedestalADC4;
      std::vector<double> eventPedestalRMSADC0;
      std::vector<double> eventPedestalRMSADC1;
      std::vector<double> eventPedestalRMSADC2;
      std::vector<double> eventPedestalRMSADC3;
      std::vector<double> eventPedestalRMSADC4;
       
      core::GenericEvent *pGenericEvent = pEvent->getEvent<core::GenericEvent>();
      
      pGenericEvent->getValues("ADC0", eventADC0);    
      pGenericEvent->getValues("ADC1", eventADC1);
      pGenericEvent->getValues("ADC2", eventADC2);
      pGenericEvent->getValues("ADC3", eventADC3);
      pGenericEvent->getValues("ADC4", eventADC4);
      pGenericEvent->getValues("TDC",  eventTDC);
      pGenericEvent->getValues("pedestalADC0", eventPedestalADC0);
      pGenericEvent->getValues("pedestalADC1", eventPedestalADC1);
      pGenericEvent->getValues("pedestalADC2", eventPedestalADC2);
      pGenericEvent->getValues("pedestalADC3", eventPedestalADC3);
      pGenericEvent->getValues("pedestalADC4", eventPedestalADC4);
      pGenericEvent->getValues("pedestalRMSADC0", eventPedestalRMSADC0);
      pGenericEvent->getValues("pedestalRMSADC1", eventPedestalRMSADC1);
      pGenericEvent->getValues("pedestalRMSADC2", eventPedestalRMSADC2);
      pGenericEvent->getValues("pedestalRMSADC3", eventPedestalRMSADC3);
      pGenericEvent->getValues("pedestalRMSADC4", eventPedestalRMSADC4);
      
      std::vector<double> eventAllADCs = eventADC0;
      eventAllADCs.insert(std::end(eventAllADCs), std::begin(eventADC1), std::end(eventADC1));
      eventAllADCs.insert(std::end(eventAllADCs), std::begin(eventADC2), std::begin(eventADC2) + 8);

      std::vector<double> eventAllLeakage;
      eventAllLeakage.insert(eventAllLeakage.begin(), eventADC3.begin()+16, eventADC3.end());
      eventAllLeakage.insert(eventAllLeakage.end(), eventADC4.begin(), eventADC4.begin()+4);

      std::vector<double> eventAllPedestalADCs = eventPedestalADC0;
      eventAllPedestalADCs.insert(std::end(eventAllPedestalADCs), std::begin(eventPedestalADC1), std::end(eventPedestalADC1));
      eventAllPedestalADCs.insert(std::end(eventAllPedestalADCs), std::begin(eventPedestalADC2), std::begin(eventPedestalADC2) + 8);

      std::vector<double> eventAllPedestalRMSADCs = eventPedestalRMSADC0;
      eventAllPedestalRMSADCs.insert(std::end(eventAllPedestalRMSADCs), std::begin(eventPedestalRMSADC1), std::end(eventPedestalRMSADC1));
      eventAllPedestalRMSADCs.insert(std::end(eventAllPedestalRMSADCs), std::begin(eventPedestalRMSADC2), std::begin(eventPedestalRMSADC2) + 8);

      for (int i = 0; i < 72; i++) {
	double thisChannelPedestal = eventAllPedestalADCs[i] + 1.5*eventAllPedestalRMSADCs[i];
	eventAllADCs[i] = eventAllADCs[i] - thisChannelPedestal;
      }
      
      for (int i = 0; i < 72; i++) {
	m_pChannelSpectra[i]->objectTo<TH1D>()->Fill(eventAllADCs[i]);
      }
      for (int i = 0; i < 21; i++) {
	m_pLeakage[i]->objectTo<TH1D>()->Fill(eventAllLeakage[i]);
      }

      //Ancillary and pedestals
      double preshower = eventADC4[9];
      double muonTrigger = eventADC4[11];
      double IT = eventADC4[8];
      double TC = eventADC4[10];
   
      double preshowerPedestalCut = eventPedestalADC4[9] + 1.5*eventPedestalRMSADC4[9];
      double muonPedestalCut = eventPedestalADC4[11] + 1.5*eventPedestalRMSADC4[11];
      double ITPedestalCut = eventPedestalADC4[8] + 1.5*eventPedestalRMSADC4[8];
      double TCPedestalCut = eventPedestalADC4[10] + 1.5*eventPedestalRMSADC4[10];

      // Booleans for the pedestals and cuts
      bool isPreshowerEvent = (preshower > preshowerPedestalCut);
      bool isMuonEvent = (muonTrigger > muonPedestalCut);

      //Actual histograms for ancillary
      m_pT3PSD->objectTo<TH1D>()->Fill(preshower);
      m_pMu->objectTo<TH1D>()->Fill(muonTrigger);
      m_pIT->objectTo<TH1D>()->Fill(IT);
      m_pTC->objectTo<TH1D>()->Fill(TC);

      m_pDWC1Left->objectTo<TH1D>()->Fill(eventTDC[0]);
      m_pDWC1Right->objectTo<TH1D>()->Fill(eventTDC[1]);
      m_pDWC1Up->objectTo<TH1D>()->Fill(eventTDC[2]);
      m_pDWC1Down->objectTo<TH1D>()->Fill(eventTDC[3]);
      m_pDWC2Left->objectTo<TH1D>()->Fill(eventTDC[4]);
      m_pDWC2Right->objectTo<TH1D>()->Fill(eventTDC[5]);
      m_pDWC2Up->objectTo<TH1D>()->Fill(eventTDC[6]);
      m_pDWC2Down->objectTo<TH1D>()->Fill(eventTDC[7]);

      //Trying to make the 2D map of the DWC
      double DWCx1 = eventTDC[0] - eventTDC[1];
      double DWCy1 = eventTDC[2] - eventTDC[3];
      double DWCx2 = eventTDC[4] - eventTDC[5];
      double DWCy2 = eventTDC[6] - eventTDC[7];
      m_pDWCMap1->objectTo<TH2D>()->Fill(DWCx1, DWCy1);
      m_pDWCMap2->objectTo<TH2D>()->Fill(DWCx2, DWCy2);

      //Creating hitmap -- using RO mappings from 2012 testbeam
      /*
      std::vector<double> channelADCsSc;
      std::vector<double> channelADCsCh;
      
      for (int i = 0; i < 72; i++) {
	if (i % 2) {
	  channelADCsCh.push_back(eventAllADCs[i] - eventAllPedestalADCs[i]);
	}
	else {
	  channelADCsSc.push_back(eventAllADCs[i] - eventAllPedestalADCs[i]);
	}
      }
      int channelNum = 0;
      for (int i = 0; i < 6; i++) {
	for (int j = 0; j < 6; j++) {
	  m_pHitmapScintillator->objectTo<TH2D>()->Fill(i, j, channelADCsSc[channelNum]);
	  channelNum++;
	}
      }
      channelNum = 0;
      for (int i = 0; i < 6; i++) {
	for (int j = 0; j < 6; j++) {
	  m_pHitmapCherenkov->objectTo<TH2D>()->Fill(i, j, channelADCsCh[channelNum]);
	  channelNum++;
	}
      }
      */

      // Total energy in the event
      double totalADC = 0;
      for (int i = 0; i < 72; i++) {
	totalADC += eventAllADCs[i];
      }

      // Calculating R
      std::sort(eventAllADCs.begin(), eventAllADCs.end());
      std::reverse(eventAllADCs.begin(), eventAllADCs.end());
      double highestChannel = eventAllADCs[0];
      double tenHighestChannels = 0;
      for (int i = 0; i < 9; i++) {
	tenHighestChannels += eventAllADCs[i];
      }

      double energyRatio = highestChannel/tenHighestChannels;
      m_pE->objectTo<TH1D>()->Fill(totalADC);
      m_pR->objectTo<TH1D>()->Fill(energyRatio);
      /*if (isMuonEvent) {
	m_pEvR->objectTo<TH2D>()->Fill(totalADC, energyRatio);
	} */
      bool e_totCut = ((totalADC > 450) and (totalADC < 600));
      bool rCut = ( (energyRatio > 0.3) and (energyRatio < 0.55) );
      if (true) {
	m_pEvR->objectTo<TH2D>()->Fill(totalADC, energyRatio);
      }
      //dqm_debug("Total ADC: {0} / Energy ratio: {1}", totalADC, energyRatio);

      std::unordered_map<int, int> umTowerMap;
      umTowerMap[12545] =  1;
      umTowerMap[12556] =  2;
      umTowerMap[12558] =  3;
      umTowerMap[12560] =  4;
      umTowerMap[12601] =  5;
      umTowerMap[12638] =  6;
      umTowerMap[12598] =  7;
      umTowerMap[12514] =  8;
      umTowerMap[12518] =  9;
      umTowerMap[12521] = 10;
      umTowerMap[12600] = 11;
      umTowerMap[12636] = 12;
      umTowerMap[12539] = 13;
      umTowerMap[12628] = 14;
      umTowerMap[12512] = 15;
      umTowerMap[12526] = 16;
      umTowerMap[12567] = 17;
      umTowerMap[12633] = 18;
      umTowerMap[12591] = 19;
      umTowerMap[12612] = 20;
      umTowerMap[12530] = 21;
      umTowerMap[12528] = 22;
      umTowerMap[12569] = 23;
      umTowerMap[12639] = 24;
      umTowerMap[12610] = 25;
      umTowerMap[12609] = 26;
      umTowerMap[12607] = 27;
      umTowerMap[12604] = 28;
      umTowerMap[12602] = 29;

      umTowerMap[12659] = 15;
      umTowerMap[12664] = 30;
      umTowerMap[12677] = 31;
      umTowerMap[12672] = 32;
      umTowerMap[12671] = 33;
      umTowerMap[12670] = 34;
      umTowerMap[12669] = 35;
      umTowerMap[12667] = 36;
      
      std::unordered_map<int, int> umTowerToChannel;
      umTowerToChannel[1] = 6;
      umTowerToChannel[2] = 4;
      umTowerToChannel[3] = 14;
      umTowerToChannel[4] = 12;
      umTowerToChannel[5] = 22;
      umTowerToChannel[6] = 20;
      umTowerToChannel[7] = 0; // This scintillator broken on this run - rerouted to ADC2-8
      umTowerToChannel[8] = 2;
      umTowerToChannel[9] = 8;
      umTowerToChannel[10] = 10;
      umTowerToChannel[11] = 16;
      umTowerToChannel[12] = 18;
      umTowerToChannel[13] = 30;
      umTowerToChannel[14] = 28;
      umTowerToChannel[15] = 38; // ADC1-06
      umTowerToChannel[16] = 36; // ADC1-04 // Cherenkov broken on this run - rerouted to ADC2-09
      umTowerToChannel[17] = 46; // ADC1-14
      umTowerToChannel[18] = 44; // ADC1-12
      umTowerToChannel[19] = 24;
      umTowerToChannel[20] = 26; 
      umTowerToChannel[21] = 32; // ADC1-00
      umTowerToChannel[22] = 34; // ADC1-02
      umTowerToChannel[23] = 40; // ADC1-08
      umTowerToChannel[24] = 42; // ADC1-10
      umTowerToChannel[25] = 54; // ADC1-22
      umTowerToChannel[26] = 52; // ADC1-20
      umTowerToChannel[27] = 62; // ADC1-30
      umTowerToChannel[28] = 60; // ADC1-28
      umTowerToChannel[29] = 70; // ADC2-06

      umTowerToChannel[30] = 68; // ADC2-04
      umTowerToChannel[31] = 48; // ADC1-16  // Cherenkov broken on this run, no substitute given
      umTowerToChannel[32] = 50; // ADC1-18
      umTowerToChannel[33] = 56; // ADC1-24
      umTowerToChannel[34] = 58; // ADC1-26
      umTowerToChannel[35] = 64; // ADC2-00
      umTowerToChannel[36] = 66; // ADC2-02

      //double calibrationMapSc[29];
      std::array<double,36> calibrationMapSc;
      calibrationMapSc[1]  = 0.7170;
      calibrationMapSc[2]  = 0.2672;
      calibrationMapSc[3]  = 0.6390;
      calibrationMapSc[4]  = 0.5212;
      calibrationMapSc[5]  = 1.2128;
      calibrationMapSc[6]  = 1.3742;
      calibrationMapSc[7]  = 0.0295;
      calibrationMapSc[8]  = 0.1097;
      calibrationMapSc[9]  = 0.3363;
      calibrationMapSc[10] = 0.2726;
      calibrationMapSc[11] = 0.5246;
      calibrationMapSc[12] = 0.7593;
      calibrationMapSc[13] = 2.2633;
      calibrationMapSc[14] = 1.1689;
      calibrationMapSc[15] = 1.0;    // By definition, as this is what we are calibrating to
      calibrationMapSc[16] = 0.7927;
      calibrationMapSc[17] = 1.5565;
      calibrationMapSc[18] = 2.2579;
      calibrationMapSc[19] = 1.3906;
      calibrationMapSc[20] = 0.9245;
      calibrationMapSc[21] = 0.8008;
      calibrationMapSc[22] = 0.8429;
      calibrationMapSc[23] = 1.1692;
      calibrationMapSc[24] = 2.4680;
      calibrationMapSc[25] = 16.0664;
      calibrationMapSc[26] = 5.9318;
      calibrationMapSc[27] = 14.0613;
      calibrationMapSc[28] = 7.5256;
      calibrationMapSc[29] = 0.0152;

      calibrationMapSc[30] = 1.0;
      calibrationMapSc[31] = 1.0;
      calibrationMapSc[32] = 1.0;
      calibrationMapSc[33] = 1.0;
      calibrationMapSc[34] = 1.0;
      calibrationMapSc[35] = 1.0;
      calibrationMapSc[36] = 1.0;

      std::array<double, 36> calibrationMapCh;
      //calibrationMapCh= calibrationMapSc;
      //calibrationMapCh[7]  = 0.10;
      //calibrationMapCh[16] = 10.0;
      
      calibrationMapCh[1]  = 0.7786;
      calibrationMapCh[2]  = 0.3204;
      calibrationMapCh[3]  = 0.6722;
      calibrationMapCh[4]  = 0.5621;
      calibrationMapCh[5]  = 1.2365;
      calibrationMapCh[6]  = 1.4109;
      calibrationMapCh[7]  = 0.1953;
      calibrationMapCh[8]  = 0.1495;
      calibrationMapCh[9]  = 0.3540;
      calibrationMapCh[10] = 0.2907;
      calibrationMapCh[11] = 0.5384;
      calibrationMapCh[12] = 0.7767;
      calibrationMapCh[13] = 2.2939;
      calibrationMapCh[14] = 1.784;
      calibrationMapCh[15] = 1.0;
      calibrationMapCh[16] = 9.8418;
      calibrationMapCh[17] = 1.5875;
      calibrationMapCh[18] = 2.3452;
      calibrationMapCh[19] = 1.4135;
      calibrationMapCh[20] = 0.9308;
      calibrationMapCh[21] = 0.7984;
      calibrationMapCh[22] = 0.8439;
      calibrationMapCh[23] = 1.1883;
      calibrationMapCh[24] = 2.5620;
      calibrationMapCh[25] = 16.8354;
      calibrationMapCh[26] = 6.3750;
      calibrationMapCh[27] = 16.2638;
      calibrationMapCh[28] = 8.6333;
      calibrationMapCh[29] = 1.0;  // No data for this yet

      calibrationMapCh[30] = 1.0;
      calibrationMapCh[31] = 1.0;
      calibrationMapCh[32] = 1.0;
      calibrationMapCh[33] = 1.0;
      calibrationMapCh[34] = 1.0;
      calibrationMapCh[35] = 1.0;
      calibrationMapCh[36] = 1.0;

      int runNumber = pEvent->getRunNumber();
      int eventNumber = pEvent->getEventNumber();

      if (umTowerMap.find(runNumber) == umTowerMap.end()) {
	dqm_warning("Could not find the tower this run number corresponds to, skipping...");
	return;
      }

      if (true) {
	int towerNumber = umTowerMap.find(runNumber)->second;
	int channelNumber = umTowerToChannel.find(towerNumber)->second;
	double towerADCSc = eventAllADCs[channelNumber];
	double towerADCCh = eventAllADCs[channelNumber+1];

	// Exceptions to account for the broken channels in some runs in the Sept 2018 testbeam, which were rerouted into ADC2
	if (towerNumber == 7) {
	  double thisChannelPedestal = eventPedestalADC2[8] + 1.5*eventPedestalRMSADC2[8];
	  towerADCSc = eventADC2[8] - thisChannelPedestal;
	  
	}
	if (towerNumber == 16) {
	  double thisChannelPedestal = eventPedestalADC2[9] + 1.5*eventPedestalRMSADC2[9];
	  towerADCCh = eventADC2[9] - thisChannelPedestal;
	}

	if (towerNumber == 29) {
	  double thisChannelPedestal = eventPedestalADC2[6] + 1.5*eventPedestalRMSADC2[6];
	  towerADCSc = eventADC2[6] - thisChannelPedestal;
	}

	if ((towerNumber == 30) or (towerNumber == 35) or (towerNumber == 36))  {
	  towerADCSc = (-1.0)*towerADCSc;
	  towerADCCh = (-1.0)*towerADCCh;
	}

	//m_pTowerPlotSc->objectTo<TH2D>()->Fill(towerNumber, towerADCSc);
	//m_pTowerPlotCh->objectTo<TH2D>()->Fill(towerNumber, towerADCCh);
	m_pTowerPlotSc->objectTo<TH2D>()->Fill(towerNumber, towerADCSc*calibrationMapSc[towerNumber]);
	m_pTowerPlotCh->objectTo<TH2D>()->Fill(towerNumber, towerADCCh*calibrationMapCh[towerNumber]);
      }

      // This section below should probably be moved, since it will be skipped if we're using a non-calibration run
      double actualADCScintillator[29];
      double actualADCCherenkov[29];
      for (int i = 1; i < 30; i++) {
	int channelNumber = umTowerToChannel.find(i)->second;
	actualADCScintillator[i] = eventAllADCs[channelNumber];
	actualADCCherenkov[i]    = eventAllADCs[channelNumber+1];
      }

      int channelNum = 0;
      for (int i = 0; i < 6; i++) {
	for (int j = 0; j < 6; j++) {
	  m_pHitmapScintillator->objectTo<TH2D>()->Fill(i, j, actualADCScintillator[channelNum]);
	  channelNum++;
	}
      }
      channelNum = 0;
      for (int i = 0; i < 6; i++) {
	for (int j = 0; j < 6; j++) {
	  m_pHitmapCherenkov->objectTo<TH2D>()->Fill(i, j, actualADCCherenkov[channelNum]);
	  channelNum++;
	}
      }


	
    }
    
    DQM_PLUGIN_DECL(RD52MainModule, "RD52MainModule");
    
  }
  
}
