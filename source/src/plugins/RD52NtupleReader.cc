/// \file RD52NtupleReader.cc
/*
 *
 * RD52FileReader.cc source template automatically generated by a class generator
 * Creation date : lun. mars 7 2016
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Tom Coates
 * @copyright CNRS , IPNL
 */


// -- std headers 
#include <sstream>

// -- dqm4hep headers
#include <dqm4hep/Event.h>
#include <dqm4hep/EventReader.h>
#include <dqm4hep/StatusCodes.h>
#include <dqm4hep/GenericEvent.h>
#include <dqm4hep/PluginManager.h>
#include <dqm4hep/XmlHelper.h>

// -- root headers
#include "TFile.h"
#include "TTree.h"
#include "TBranch.h"
#include "TLeaf.h"

namespace dqm4hep {

  namespace core {

    /**
     *  @brief  RD52NtupleReader class
     *          Read a DREAM RD52 calorimeter .dat datafile and read GenericEvent events from it
     */
    class RD52NtupleReader : public EventReader {
    public:
      RD52NtupleReader() = default;
      ~RD52NtupleReader() override;
      RD52NtupleReader(const RD52NtupleReader&) = delete;
      RD52NtupleReader& operator=(const RD52NtupleReader&) = delete;

      core::StatusCode open(const std::string &fname) override;
      core::StatusCode skipNEvents(int nEvents) override;
      core::StatusCode runInfo(core::Run &run) override;
      core::StatusCode readNextEvent() override;
      core::StatusCode close() override;
      
    protected:

    private:
      int nEntries = -1;
      int currentEventNumber = -1;
      TFile *rootFile = new TFile;
      TTree *mainTree = new TTree;

    };
    
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    RD52NtupleReader::~RD52NtupleReader() {
      //
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode RD52NtupleReader::open(const std::string &fname) {

      rootFile = new TFile(fname.c_str());
      mainTree = (TTree*)rootFile->Get("DREAM");

      nEntries = mainTree->GetEntries();
      if (nEntries == -1 ) {
	dqm_error("Could not determine the numer of events in file {0}", fname);
	return STATUS_CODE_FAILURE;
      }

      currentEventNumber = 0;
      
      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode RD52NtupleReader::skipNEvents(int nEvents) {


      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode RD52NtupleReader::runInfo(core::Run &run) {

      run.setRunNumber(mainTree->GetBranch("Nrunnumber")->GetLeaf("Nrunnumber")->GetValue());

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode RD52NtupleReader::readNextEvent() {

      if (currentEventNumber == nEntries-1) {
	dqm_info("Reached end of file");
	return STATUS_CODE_OUT_OF_RANGE;
      }

      EventPtr pEvent = GenericEvent::make_shared();
      GenericEvent *pGenericEvent = pEvent->getEvent<GenericEvent>();

      mainTree->GetEvent(currentEventNumber);
      dqm_debug("Event: {0}", currentEventNumber);

      int eventTime = mainTree->GetBranch("TimeEvu")->GetLeaf("TimeEvu")->GetValue();
      pEvent->setTimeStamp(dqm4hep::core::time::asPoint(eventTime));

      std::vector<double> vADC0;
      for (int i = 0; i < 32; i++) {
	double dataValue = mainTree->GetBranch("CHARGEADCN0")->GetLeaf("CHARGEADCN0")->GetValue(i);
	vADC0.push_back(dataValue);
      }
      pGenericEvent->setValues("ADC0", vADC0);

      std::vector<double> vADC1;
      for (int i = 0; i < 32; i++) {
	double dataValue = mainTree->GetBranch("CHARGEADCN1")->GetLeaf("CHARGEADCN1")->GetValue(i);
	vADC1.push_back(dataValue);
      }
      pGenericEvent->setValues("ADC1", vADC1);

      std::vector<double> vADC2;
      for (int i = 0; i < 32; i++) {
	double dataValue = mainTree->GetBranch("CHARGEADCN1")->GetLeaf("CHARGEADCN1")->GetValue(i);
	vADC2.push_back(dataValue);
      }
      pGenericEvent->setValues("ADC2", vADC2);

      std::vector<double> vADC3;
      for (int i = 0; i < 32; i++) {
	double dataValue = mainTree->GetBranch("CHARGEADCN1")->GetLeaf("CHARGEADCN1")->GetValue(i);
	vADC3.push_back(dataValue);
      }
      pGenericEvent->setValues("ADC3", vADC3);

      std::vector<double> vADC4;
      for (int i = 0; i < 32; i++) {
	double dataValue = mainTree->GetBranch("CHARGEADCN1")->GetLeaf("CHARGEADCN1")->GetValue(i);
	vADC4.push_back(dataValue);
      }
      pGenericEvent->setValues("ADC4", vADC4);

      std::vector<double> vTDC;
      for (int i = 0; i < 64; i++) {
	double dataValue = mainTree->GetBranch("COUNTTDC")->GetLeaf("COUNTTDC")->GetValue(i);
	vTDC.push_back(dataValue);
      }
      pGenericEvent->setValues("TDC", vTDC);

      std::vector<double> vPedestalADC0;
      for (int i =  0; i < 32; i++) {
	double dataValue = mainTree->GetBranch("PED_MEAN_ADCN0")->GetLeaf("PED_MEAN_ADCN0")->GetValue(i);
	vPedestalADC0.push_back(dataValue);
      }
      pGenericEvent->setValues("pedestalADC0", vPedestalADC0);

      std::vector<double> vPedestalADC1;
      for (int i =  0; i < 32; i++) {
	double dataValue = mainTree->GetBranch("PED_MEAN_ADCN1")->GetLeaf("PED_MEAN_ADCN1")->GetValue(i);
	vPedestalADC1.push_back(dataValue);
      }
      pGenericEvent->setValues("pedestalADC1", vPedestalADC1);

      std::vector<double> vPedestalADC2;
      for (int i =  0; i < 32; i++) {
	double dataValue = mainTree->GetBranch("PED_MEAN_ADCN2")->GetLeaf("PED_MEAN_ADCN2")->GetValue(i);
	vPedestalADC2.push_back(dataValue);
      }
      pGenericEvent->setValues("pedestalADC2", vPedestalADC2);


      onEventRead().emit(pEvent);
      currentEventNumber++;

      return STATUS_CODE_SUCCESS;
      
    }

    StatusCode RD52NtupleReader::close() {

      delete[] rootFile;
      delete[] mainTree;
            
      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------
    
    DQM_PLUGIN_DECL(RD52NtupleReader, "RD52NtupleReader");
  }
}
