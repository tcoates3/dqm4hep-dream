/// \file DriftChamberNtupleReader.cc
/*
 *
 * DriftChamberNtupleReader.cc source template automatically generated by a class generator
 * Creation date : lun. mars 7 2016
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Tom Coates
 * @copyright CNRS , IPNL
 */


// -- std headers 
#include <sstream>

// -- dqm4hep headers
#include <dqm4hep/Event.h>
#include <dqm4hep/EventReader.h>
#include <dqm4hep/StatusCodes.h>
#include <dqm4hep/GenericEvent.h>
#include <dqm4hep/PluginManager.h>
#include <dqm4hep/XmlHelper.h>

// -- root headers
#include <TFile.h>
#include <TTree.h>
#include <TLeaf.h>

namespace dqm4hep {

  namespace core {

    /**
     *  @brief  DriftChamberNtupleReader class
     *          An example plugin for creating file readers
     */
    class DriftChamberNtupleReader : public EventReader {
    public:
      DriftChamberNtupleReader() = default;
      ~DriftChamberNtupleReader() override;
      DriftChamberNtupleReader(const DriftChamberNtupleReader&) = delete;
      DriftChamberNtupleReader& operator=(const DriftChamberNtupleReader&) = delete;

      core::StatusCode open(const std::string &fname) override;
      core::StatusCode skipNEvents(int nEvents) override;
      core::StatusCode runInfo(core::Run &run) override;
      core::StatusCode readNextEvent() override;
      core::StatusCode close() override;
      
    };
    
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    DriftChamberNtupleReader::~DriftChamberNtupleReader() {

    }

    //-------------------------------------------------------------------------------------------------

    StatusCode DriftChamberNtupleReader::open(const std::string &fname) {
      
      //inputFile = fopen(fname.c_str(), "r");

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode DriftChamberNtupleReader::skipNEvents(int nEvents) {

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode DriftChamberNtupleReader::runInfo(core::Run &run) {

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode DriftChamberNtupleReader::readNextEvent() {

      EventPtr pEvent = GenericEvent::make_shared();
      GenericEvent *pGenericEvent = pEvent->getEvent<GenericEvent>();

      onEventRead().emit(pEvent);

      return STATUS_CODE_SUCCESS;
    }

    StatusCode DriftChamberNtupleReader::close() {

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------
    
    DQM_PLUGIN_DECL(DriftChamberNtupleReader, "DriftChamberNtupleReader");
  }
}
