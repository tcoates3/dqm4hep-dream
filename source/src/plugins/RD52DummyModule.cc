/// \file RD52DummyModule.cc
/*
 *
 * RD52DummyModule.cc source template automatically generated by a class generator
 * Creation date : 13 june 2018
 *
 * This file is part of dqm4hep-dream libraries.
 *
 * dqm4hep-dream is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with dqm4hep-dream.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @author Tom Coates
 * @copyright 2018
 */

// -- dqm4hep headers
#include <dqm4hep/Internal.h>
#include <dqm4hep/StatusCodes.h>
#include <dqm4hep/GenericEvent.h>
#include <dqm4hep/RootHeaders.h>
#include <dqm4hep/Module.h>
#include "dqm4hep/PluginManager.h"
#include "dqm4hep/OnlineElement.h"
#include "dqm4hep/ModuleApi.h"

namespace dqm4hep {

  namespace dream {
    
    class RD52DummyModule : public dqm4hep::online::AnalysisModule {
    public:
      RD52DummyModule() = default;
      RD52DummyModule(const RD52DummyModule&) = delete;
      RD52DummyModule& operator=(const RD52DummyModule&) = delete;
      
    private:
      void readSettings(const core::TiXmlHandle &handle) override;
      void initModule() override;
      void startOfRun(core::Run &run) override;
      void startOfCycle() override;
      void endOfCycle(const online::EOCCondition &condition) override;
      void endOfRun(const core::Run &run) override;
      void endModule() override;
      void process(core::EventPtr event) override;
      
    private:
      std::vector<online::OnlineElementPtr> m_pSpectrum;
    };
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52DummyModule::readSettings(const core::TiXmlHandle &xmlHandle) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52DummyModule::initModule() {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52DummyModule::startOfRun(core::Run &/*run*/) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52DummyModule::startOfCycle() {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52DummyModule::endOfCycle(const online::EOCCondition &/*condition*/) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52DummyModule::endOfRun(const core::Run &/*run*/) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RD52DummyModule::endModule() {

    }
    
    //-------------------------------------------------------------------------------------------------

    void RD52DummyModule::process(core::EventPtr pEvent) {

      if (nullptr == pEvent) {
	dqm_warning("Event pointer is invalid - skipping this event");
	return;
      }

      std::vector<std::string> eventType;
      std::vector<int> eventChannels;
      std::vector<int> eventADC;
      std::vector<int> eventTDC;

      core::GenericEvent *pGenericEvent = pEvent->getEvent<core::GenericEvent>();
      pGenericEvent->getValues("EventType", eventType);
      pGenericEvent->getValues("Channels", eventChannels);

      if (eventType[0] == "ADC") {
	pGenericEvent->getValues("ADCN", eventADC);
	// Other ADC processing here...
      }
      if (eventType[0] == "TDC") {
	pGenericEvent->getValues("TDC", eventTDC);
	// Other TDC processing here...
      }

    }
    
    DQM_PLUGIN_DECL(RD52DummyModule, "RD52DummyModule");
    
  }
  

}
